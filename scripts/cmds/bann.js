const axios = require("axios");

module.exports = {
  config: {
    name: "ban",
    version: "1.0.0",
    author: "Converted by Chatgpt | Original: Joy",
    description: "Ban or unban a user, supports whitelist via GitHub.",
    usage: "[ban/unban] [reply/userID]",
    cooldown: 3,
    role: 2 // Admin only
  },

  onStart: async function ({ api, event, args }) {
    const subCommand = args[0]?.toLowerCase();
    const uid = event.type === "message_reply" ? event.messageReply.senderID : args[1];

    if (!["ban", "unban"].includes(subCommand)) {
      return api.sendMessage("тЭУ Use `/ban ban [uid/reply]` or `/ban unban [uid/reply]`", event.threadID, event.messageID);
    }

    if (!uid || isNaN(uid)) {
      return api.sendMessage("тЭМ Provide a valid user ID or reply to a message.", event.threadID, event.messageID);
    }

    const allowList = await fetchAllowList();
    if (allowList.includes(uid)) {
      return api.sendMessage("ЁЯЪл This user is whitelisted and cannot be modified.", event.threadID, event.messageID);
    }

    if (subCommand === "ban") {
      if (global.GoatBot_BannedUsers?.includes(uid)) {
        return api.sendMessage("тЪая╕П This user is already banned.", event.threadID, event.messageID);
      }
      global.GoatBot_BannedUsers = global.GoatBot_BannedUsers || [];
      global.GoatBot_BannedUsers.push(uid);
      global.GoatBot_BanMessageIndex = global.GoatBot_BanMessageIndex || {};
      global.GoatBot_BanMessageIndex[uid] = 0;
      api.sendMessage("тЬЕ User has been banned.", event.threadID, event.messageID);
    }

    if (subCommand === "unban") {
      global.GoatBot_BannedUsers = global.GoatBot_BannedUsers?.filter(id => id !== uid) || [];
      if (global.GoatBot_BanMessageIndex) delete global.GoatBot_BanMessageIndex[uid];
      api.sendMessage("тЬЕ User has been unbanned.", event.threadID, event.messageID);
    }
  },

  onChat: async function ({ event, api }) {
    const uid = event.senderID;
    const banned = global.GoatBot_BannedUsers || [];
    if (!banned.includes(uid)) return;

    const allowList = await fetchAllowList();
    if (allowList.includes(uid)) return;

    const index = global.GoatBot_BanMessageIndex?.[uid] || 0;
    const message = messages[index % messages.length];
    global.GoatBot_BanMessageIndex[uid] = (index + 1) % messages.length;
    return api.sendMessage(message, event.threadID, event.messageID);
  }
};

// GitHub whitelist fetch
const WHITELIST_URL = "https://raw.githubusercontent.com/SAGOR690beep/Sagor404/main/admins.json";

async function fetchAllowList() {
  try {
    const res = await axios.get(WHITELIST_URL);
    return res.data.allowList || [];
  } catch (err) {
    console.warn("[ban] Could not fetch allowList:", err.message);
    return [];
  }
}

// Cleaned up warning messages (you should revise these if needed)
const messages = [
  "ржЦрж╛ржВржХрж┐рж░ ржкрзЛрж▓рж╛ рждрж░ ржорж╛рж░рзЗ ржЪрзБржжрж┐ ЁЯе░",
"ржЦрж╛ржВржХрж┐рж░ ржкрзЛрж▓рж╛ рждрж░ ржХржЪрж┐ ржмрзЛржи рж░рзЗ ржЪрзБржжрж┐ ",
"ржорж╛ржжрж╛рж░ржЪрзЛржж рждрж░ ржЖржорзНржорзБ ржкржо ржкржо ржЦрж╛ржВржХрж┐рж░ ржкрзЛ ЁЯР░",
"ржЦрж╛ржВржХрж┐рж░ ржкрзЛрж▓рж╛ рждрж░ ржХржЪрж┐ ржнрзБржжрж╛рзЯ ржнрзБржжрж╛рзЯ ржХрж╛ржорж░ ржжрж┐ржорзБ  ЁЯТФ!",
"ржЦрж╛ржВржХрж┐ ржорж╛ржЧрж┐рж░ ржкрзЛрж▓рж╛ ржХржерж╛ ржХ ржХржо ржХржо рждрж░ ржЖржорзНржорзБ рж░рзЗ ржЪрзБржжрзЗ ржмрж╛ржирж╛ржорзБ ржЖржЗржЯрзЗржо ржмрзЛржо ",
"depression ржерзЗржХрзЗржУ рждрж░ ржорж╛ржЗрж░рзЗ ржЪрзБ*** ржжрж┐ ЁЯдм ",
"рждрж░ ржЖржорзНржорзБ рж░рзЗ ржЖржЪрж╛рж░ ржПрж░ рж▓рзЛржн ржжрзЗржЦрж┐ ржЪрзБржжрж┐ ржорж╛ржЧрж┐рж░ ржкрзЛрж▓рж╛ЁЯдм",
"ржмрж╛ржирзНржжрж┐рж░ ржкрзЛрж▓рж╛ рждрж░ ржХржЪрж┐ ржмрзЛржирзЗрж░ ржнрзБржжрж╛ ржлрж╛ржХ ржХрж░ ржерзБрждрзБ ржжрж┐рзЯрзЗ ржнрзБржжрж╛рзЯ ржжржи ржбрзБржХрж╛ржорзБ ЁЯдЯ",
"ржмрж╛ржирзНржжрж┐ ржорж╛ржЧрж┐рж░ ржкрзЛрж▓рж╛ рждрж░ ржЖржорзНржорзБ рж░рзЗ ржЪрзБржжрж┐ рждрж░ ржжрзБрж▓рж╛ ржнрж╛ржЗ ржПрж░ ржХрж╛ржирзНржжрзЗ ржлрзЗрж▓рзЗ  ЁЯдЭ",
"ржЙржлржлржл ржЦрж╛ржжрзНржжрж╛ржорж╛ ржорж╛ржЧрж┐рж░ ржкрзЛрж▓рж╛ рждрж░ ржЖржорзНржорзБрж░ ржХрж╛рж▓рж╛ ржнрзБржжрж╛рзЯ ржЖржорж╛рж░ ржорж╛рж▓ ржЖржЙржЯ рждрж░ ржХржЪрж┐ ржмрзЛржи рж░рзЗ ржЙржкрзНрждрж╛ ржХрж░рзЗ ржПржмрж╛рж░ ржЪрзБржжржмрзЛ  ЁЯТЙред",
"ржЕржирж▓рж╛ржЗржирзЗ ржЧрж╛рж▓рж┐ ржмрж╛ржЬ рж╣рзЯрзЗ ржЧрзЗржЫржд ржорж╛ржЧрж┐рж░ ржкрзЛрж▓рж╛ ржПржоржи ржЪрзБржжрж╛ ржжрж┐ржорзБ рж▓рж╛ржЗржл ржЯрж╛ржЗржо ржоржирзЗ рж░рж╛ржЦржнрж┐  ржЬрзЯ рждрж░ ржмрж╛ржк ржорж╛ржЧрж┐рж░ ржЫрзЗрж▓рзЗ ЁЯШШред",
"ржмрж╛рждрж┐ржЬрж╛ рж╢рзБржи рждрж░ ржЖржорзНржорзБ рж░рзЗ ржЪрзБржжрж▓рзЗ рж░рж╛ржЧ ржХрж░ржмрж┐ ржирж╛ рждрзЛ ржЖржЪрзНржЫрж╛ ржЬрж╛ рж░рж╛ржЧ ржХрж░рж┐рж╕ ржирж╛ рждрж░ ржЖржорзНржорзБрж░ ржХрж╛рж▓рж╛ ржнрзБржжрж╛рзЯ ржЖрж░ ржЪрзБржжрж▓рж╛ржо ржирж╛ рждрзЛ ржмрзЛржи ржПрж░ ржЬрж╛ржорж╛ ржЯрж╛ ржЦрзБрж▓рзЗ ржжрзЗ  тЬЛ",
" рж╣рж╛ржЗ ржорж╛ржжрж╛рж░ржЪрзЛржж рждрж░ рждрж░ ржмрзНржпрж╛рж╢рж╛ ржЬрж╛рждрзЗрж░ ржЖржорзНржорзБ ржЯрж╛ рж░рзЗ ржЖржжрж░ ржХрж░рзЗ ржХрж░рзЗ ржЪрзБржжрж┐ "
];
